#include <iostream>
// #include <iomanip>
// #include <algorithm>
#include <string>
#include <sstream>
#include <limits>

using namespace std; //可以不用打std

char int_2_char(int digit){
    char digit_c;
    if (digit <= 9){
        digit_c = char(digit + 48);
    }
    else{
        digit_c = char(digit + 55);
    }
    return digit_c;
}

int char_2_int(char digit_c){
    int digit;
    if (digit_c == '\0'){
        digit = 0;
    }
    else if (int(digit_c) >= int('0') && int(digit_c) <= int('9')){
        digit = int(digit_c) - int('0');
    }
    else{
        digit = int(digit_c) - int('A') + 10;
    }
    return digit;
}

bool hex_check(string &array){
    int counter = 0,flag = 0;
    char input_hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

    for(int i=0;i<array.length();i++){
        flag = 0;
        for(int j=0;j<15;j++){
            if(array[i] == input_hex[j]){
                flag = 1;
                break;
                
            }
        }
        if(!flag){
            cout << "Wrong input! Please enter hexadecimal number and try again.\n" << endl;
            return 0;
        }
    }
    return 1;
}

void front_zero_clean(string &array){
    while(array[0] == '0'){
        for(int i=0;i<array.length();i++){
            array[i] = array[i+1];
        }
        array.pop_back();
    }

    if(array.length() == 0){
        array[0] = '0';
    }
}

int array_compare(string &array1,string &array2,string &compare1,string &compare2){
    int counter1 = 0,counter2 = 0,counter =  0;

    // cout << "array1: " << array1 << endl;
    // cout << "array2: " << array2 << endl;

    compare1.clear();
    compare2.clear();

    compare1 = array1;
    compare2 = array2;

    front_zero_clean(compare1);
    front_zero_clean(compare2);

    // cout << "compare1: " << compare1 << endl;
    // cout << "compare2: " << compare2 << endl;

    counter1 = compare1.length();
    counter2 = compare2.length();

    if (counter1 > counter2){ // 1>2
        return 0;
    }
    else if (counter1 < counter2){ // 1<2
        return 1;
    }
    else{
        while(counter <= counter1){
            if(char_2_int(compare1[counter]) == char_2_int(compare2[counter])){
                counter += 1;
            }
            else if (char_2_int(compare1[counter]) > char_2_int(compare2[counter])){
                return 0; // 1>2
            }
            else{
                return 1; // 1<2
            }
        }
        return 2; // 1=2
    }
}

void array_shift(string &array,int shift_time){
    for(int i=0;i<shift_time;i++){
        array = "0" + array;
    }
}

void add(string &number1,string &number2,string &answer){
    int counter1 = 0,counter2 = 0;
    int in1 = 0,in2 = 0,sum = 0,carry = 0;
    int shift_time = 0;

    front_zero_clean(number1);
    front_zero_clean(number2);

    counter1 = number1.length();
    counter2 = number2.length();

    cout << counter1 << endl;
    cout << counter2 << endl;

    //平移小的
    if (counter2 > counter1){
        array_shift(number1,counter2-counter1);
    }
    else{
        array_shift(number2,counter1-counter2);
    }

    cout << number1 << endl;
    cout << number2 << endl;

    for(int i = counter1;i>-1;i--){
        // cout << i << endl;
        in1 = char_2_int(number1[i-1]);
        in2 = char_2_int(number2[i-1]);

        sum = (in1 + in2 + carry)%16;

        if (in1 + in2 > 16){
            carry = (in1 + in2 + carry)/16;
        }
        else{
            carry = 0;
        }

        cout << "sum: " << sum << " carry: " << carry << endl;

        // answer[i] = to_string(int_2_char(sum));
        string answer(i, int_2_char(sum));
    }

    cout << number1 << endl;
    cout << number2 << endl;
    cout << answer << endl;

    // 除前面的0
    front_zero_clean(answer);
    front_zero_clean(number1);
    front_zero_clean(number2);
}

void sub(string &number1,string &number2,string &answer){
    int counter1 = 0,counter2 = 0,counter_z = 0;
    int in1 = 0,in2 = 0,result = 0,borrow = 0;
    int shift_time = 0,flag = 0,all_zero_flag = 0;

    front_zero_clean(number1);
    front_zero_clean(number2);

    counter1 = number1.length();
    counter2 = number2.length();

    //平移小的
    if (counter2 > counter1){
        shift_time = counter2-counter1;
        for(int i = 0;i<shift_time;i++){
            for(int j = counter1;j>-1;j--){
                number1[j+1] = number1[j];
            }
            number1[0] = '0';
            counter1 += 1;
        }
        flag = 1;
    }
    else{
        shift_time = counter1-counter2;
        for(int i = 0;i<shift_time;i++){
            for(int j = counter2;j>-1;j--){
                number2[j+1] = number2[j];
            }
            number2[0] = '0';
            counter2 += 1;
        }
    }

    // cout << number1 << endl;
    // cout << number2 << endl; // 前面有'\0'沒辦法輸出

    for(int i = counter1-1;i>-1;i--){
        // cout << i << endl;
        if (flag == 1){ 
            in1 = char_2_int(number2[i]);
            in2 = char_2_int(number1[i]);
        }
        else{
            in1 = char_2_int(number1[i]);
            in2 = char_2_int(number2[i]);
        }

        result = in1 - in2 - borrow;
        if (result >= 0){
            borrow = 0;
        }
        else{
            borrow = 1;
            result = (result + borrow*16)%16;
        }

        // cout << "result: " << result << " borrow: " << borrow << endl;

        answer[i] = int_2_char(result);
    }

    // cout << number1 << endl;
    // cout << number2 << endl;
    // cout << answer << endl;

    // 除前面的0
    front_zero_clean(answer);
    front_zero_clean(number1);
    front_zero_clean(number2);
}

void multi(string &number1,string &number2,string &mul,string &mul2,string &answer){
    int counter1 = 0,counter2 = 0,counter1_s = 0,counter2_s = 0,counter_i = 0,counter_j = 0;
    int in1 = 0,in2 = 0,sum = 0,carry = 0;
    int shift_time = 0,flag = 0;

    front_zero_clean(number1);
    front_zero_clean(number2);

    counter1 = number1.length();
    counter2 = number2.length();

    // mul、answer初始化
    for (int i=0;i<counter1+counter2;i++){ //多留一位進位
        mul[i] = '0';
        mul2[i] = '0';
    }

    // cout << mul << endl;
    // cout << mul2 << endl;

    counter1_s = counter1;
    counter2_s = counter2;

    //平移小的
    if (counter2 > counter1){
        shift_time = counter2-counter1;
        for(int i = 0;i<shift_time;i++){
            for(int j = counter1_s;j>-1;j--){
                number1[j+1] = number1[j];
            }
            number1[0] = '0';
            counter1_s += 1;
        }
        flag = 1; // 2>1
    }
    else{
        shift_time = counter1-counter2;
        for(int i = 0;i<shift_time;i++){
            for(int j = counter2_s;j>-1;j--){
                number2[j+1] = number2[j];
            }
            number2[0] = '0';
            counter2_s += 1;
        }
    }

    // cout << number1 << endl;
    // cout << number2 << endl; // 前面有'\0'沒辦法輸出

    for(int i = max(counter1,counter2)-1;i>max(counter1,counter2) - min(counter1,counter2)-1;i--){
        counter_j = 0;
        for(int j = max(counter1,counter2)-1;j>-1;j--){
            if (flag == 1){ // 2>1
                in1 = char_2_int(number2[j]);
                in2 = char_2_int(number1[i]);
            }
            else{
                in1 = char_2_int(number1[j]);
                in2 = char_2_int(number2[i]);
            }

            // cout << "i: " << i << " in2: " << in2 << " j: " << j << " in1: " << in1 << endl;

            if (in2 == 0){
                continue;
            }

            sum = (in1 * in2 + carry)%16;
            carry = (in1 * in2 + carry)/16;

            // cout << "sum: " << sum << " carry: " << carry << endl;

            mul[counter1+counter2-1-counter_j-counter_i] = int_2_char(sum);
            counter_j += 1;

            if(carry != 0 && i == max(counter1,counter2) - min(counter1,counter2)){
                mul[counter1+counter2-1-counter_j-counter_i] = int_2_char(carry);
            }
        }
        counter_i += 1;

        // cout << mul << endl;
        // cout << mul2 << endl;

        add(mul,mul2,answer);

        // 清空mul
        for (int i=0;i<counter1+counter2;i++){
            mul[i] = '0';
            mul2[i] = answer[i];
        }
    }

    // 除前面的0
    front_zero_clean(answer);
    front_zero_clean(number1);
    front_zero_clean(number2);

    // cout << number1 << endl;
    // cout << number2 << endl;
    // cout << answer << endl;

    // mul、mul2清空
    mul.clear();
    mul2.clear();
}

void div(string &number1,string &number2,string &mul,string &mul2,string &dividend,string &divisor,string &quotient,string& remainder,string &answer,string &compare1,string &compare2){
    int counter1 = 0,counter2 = 0,counter_quotient = 0,counter_divisor = 0,counter_ans = 0,pointer = 0,counter_remainder = 0,counter_remainder_write = 0;
    int in1 = 0,in2 = 0;
    int shift_time = 0,flag = 0,all_zero_flag = 0;

    front_zero_clean(number1);
    front_zero_clean(number2);

    counter1 = number1.length();
    counter2 = number2.length();

    // 不能除0
    if(number2[0] == '0' && counter2 == 1){
        cout << "It can't be divided by 0.\n" << endl;
        return;
    }

    // cout << number1 << endl;
    // cout << number2 << endl; // 前面有'\0'沒辦法輸出

    while(1){
        if(pointer + counter2 > counter1){
            break;
        }

        // 取被除數
        counter_divisor = 0;
        for(int j = 0;j<counter2;j++){
            divisor[j] = number1[pointer+j];
        }

        cout << "1divisor: " << divisor << endl;
        
        counter_divisor = counter2;
        if(array_compare(divisor,number2,compare1,compare2) == 1){ // divisor < number2 => 1
            divisor[counter_divisor] = number1[pointer+counter_divisor];
            counter_divisor += 1;

            if(counter2 != 1){
                answer[counter_ans] = '0';
                counter_ans += 1;
            }
        }

        cout << "counter_divisor: " << counter_divisor << endl;
        cout << "2divisor: " << divisor << endl;

        counter_quotient = 1;
        while(array_compare(dividend,divisor,compare1,compare2)){ // dividend <= divisor => 1、2
            quotient[0] = int_2_char(counter_quotient);

            multi(number2,quotient,mul,mul2,dividend);
            counter_quotient += 1;

            cout << "dividend: " << dividend << endl;
            cout << "counter_quotient: " << counter_quotient << endl;
        }

        // 商
        quotient[0] = int_2_char(counter_quotient-2); // 商

        multi(number2,quotient,mul,mul2,dividend);
        sub(divisor,dividend,remainder);

        cout << "divisor: " << divisor << endl;
        cout << "dividend: " << dividend << endl;
        cout << "quotient: " << quotient << endl;
        cout << "remainder: " << remainder << endl;

        answer[counter_ans] = quotient[0];
        counter_ans += 1;
        cout << "answer: " << answer << endl;

        counter_remainder = remainder.length();
        cout << "counter_remainder: " << counter_remainder << endl;

        counter_remainder_write = 0;
        for(int j=0;j<counter_divisor;j++){
            if(j < counter_divisor-counter_remainder){
                number1[pointer+j] = '0';
            }
            else{
                number1[pointer+j] = remainder[counter_remainder_write];
                counter_remainder_write += 1;
            }
        }
        cout << number1 << endl;
        
        pointer += counter_divisor;
        cout << "1pointer: " << pointer << endl;

        if(array_compare(number1,number2,compare1,compare2)){ // number1 < number2 => 1
            for(int j = counter_ans;j<counter1 - counter2+1;j++){
                answer[j] = '0';
            }
        }
        else{
            pointer -= counter_remainder;
            cout << "2pointer: " << pointer << endl;
        }

        // 餘數、除數、被除數清空
        dividend.clear();
        divisor.clear();
        remainder.clear();
    }

    // 除前面的0
    front_zero_clean(answer);
    front_zero_clean(number2);
    front_zero_clean(number1);
}

int main(){
    string mode;

    // char number1[101] = {'\0'}; // 100個數字+'\0'
    // char number2[101] = {'\0'};
    // char answer[201] = {'\0'};

    // char mul[201] = {'\0'};
    // char mul2[201] = {'\0'};

    // char dividend[101] = {'\0'};
    // char divisor[101] = {'\0'};
    // char quotient[101] = {'\0'};
    // char remainder[101] = {'\0'};

    // char compare1[101] = {'\0'};
    // char compare2[101] = {'\0'};

    string number1;
    string number2;
    string answer;

    string mul;
    string mul2;

    string dividend;
    string divisor;
    string quotient;
    string remainder;

    string compare1;
    string compare2;

    while(1){
        cout << "----Welcome to big number calculator----\nPlease choose the function\n0. Exit\n1. Addition\n2. Subtraction\n3. Multiplication\n4. Division\n--------------------------" << endl;
        cin >> mode;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        //初始化
        number1.clear();
        number2.clear();
        answer.clear();

        mul.clear();
        mul2.clear();

        dividend.clear();
        divisor.clear();
        quotient.clear();
        remainder.clear();

        compare1.clear();
        compare2.clear();

        if (mode == "1"){  //加法
            cout << "\n----Now for Addition----\nPlease enter the two numbers(hex).\n";
            getline(cin,number1);

            if(number1.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(number1.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number1)){
                continue;
            }

            getline(cin,number2);

            if(number2.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number2)){
                continue;
            }

            // number1:A B C
            //      th:0 1 2

            add(number1,number2,answer);
            cout << "Result(hex): " << answer << endl;
            cout << endl;
        }
        else if (mode == "2"){ //減法
            cout << "\n----Now for Subtraction----\nPlease enter the two numbers(hex).\n";
            getline(cin,number1);

            if(number1.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number1)){
                continue;
            }

            getline(cin,number2);

            if(number2.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number2)){
                continue;
            }

            sub(number1,number2,answer);
            cout << "Result(hex): " << answer << endl;
            cout << endl;
        }
        else if (mode == "3"){ //乘法
            cout << "\n----Now for Multiplication----\nPlease enter the two numbers(hex).\n";
            getline(cin,number1);

            if(number1.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number1)){
                continue;
            }

            getline(cin,number2);

            if(number2.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number2)){
                continue;
            }

            multi(number1,number2,mul,mul2,answer);
            cout << "Result(hex): " << answer << endl;
            cout << endl;
        }
        else if (mode == "4"){ //除法 // 1234/34
            cout << "\n----Now for Division----\nPlease enter the two numbers(hex).\n";
            getline(cin,number1);

            if(number1.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }

            if(!hex_check(number1)){
                continue;
            }

            getline(cin,number2);

            if(number2.length() > 100){
                cout << "Input out-of-range! Please try again.\n" << endl;
                continue;
            }
            
            if(!hex_check(number2)){
                continue;
            }

            div(number1,number2,mul,mul2,dividend,divisor,quotient,remainder,answer,compare1,compare2);

            if(!(number2[0] == '0' && number2.length() == 1)){
                cout << "Result(hex): " << answer << endl;
                cout << "Remainder(hex): " << number1 << endl;
                cout << endl;
            }

        }
        else if (mode == "0"){
            cout << "Good bye!\n";
            return 0;
        }
        else{
            cout << "Error! Please try again.\n\n";
            continue;
        }
    }
}
